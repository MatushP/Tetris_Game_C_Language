/* BLOCKS.C
*		
*	Matush Polakovic	mpola783@mtroyal.ca
*	Zachariah Ly	zly859@mtroyal.ca
*	COMP2659
* 	Paul Pospisil
*
*
*Purpose -	Handles Tetris blocks and formation of Tetriminos
*	Details:
*		"blocks.c" consists of the block bitmap, which
*		contains a black block with a 2-pixel wide border around
*		the block. This file holds the default matrix for copying
*		tetramino shapes to be used, and ability to modify current
*		tetramino 4x4 matrix used for gameplay.
*		
*/

#include "blocks.h"
#include <osbind.h>
#include <stdio.h>
#include "main.h"
#include "types.h"
#include "events.h"



	static UINT16 block_bitmap[BLOCK_HEIGHT] = {
	0x0000, 0x7FFE, 0x7FFE, 0x7FFE,
	0x7FFE, 0x7FFE, 0x7FFE, 0x7FFE,
	0x7FFE, 0x7FFE, 0x7FFE, 0x7FFE,
	0x7FFE, 0x7FFE, 0x7FFE, 0x0000	
	};

	static UINT16 i_block[4][4] = {
    {0, 0, 0, 0},
    {1, 1, 1, 1},
    {0, 0, 0, 0},
    {0, 0, 0, 0}};
	
	static UINT16 j_block[4][4] = {
    {0, 0, 0, 0},
    {1, 0, 0, 0},
    {1, 1, 1, 0},
    {0, 0, 0, 0}};

	static UINT16 l_block[4][4] = {
    {0, 0, 0, 0},
    {0, 0, 0, 1},
    {0, 1, 1, 1},
    {0, 0, 0, 0}};

	static UINT16 o_block[4][4] = {
    {0, 0, 0, 0},
    {0, 1, 1, 0},
    {0, 1, 1, 0},
    {0, 0, 0, 0}};

	static UINT16 s_block[4][4] = {
    {0, 0, 0, 0},
    {0, 1, 1, 0},
    {1, 1, 0, 0},
    {0, 0, 0, 0}};

	static UINT16 t_block[4][4] = {
    {0, 0, 0, 0},
    {0, 1, 1, 1},
    {0, 0, 1, 0},
    {0, 0, 0, 0}};

	static UINT16 z_block[4][4] = {
    {0, 0, 0, 0},
    {0, 1, 1, 0},
    {0, 0, 1, 1},
    {0, 0, 0, 0}};
	
	
	void copy_matrix(UINT16 src[][4], UINT16 dst[][4])
	{
		int i;
		int j;
		
		for(j = 0; j < 4; j++)
			for(i = 0; i < 4; i++)
				dst[j][i] = src[j][i];
		
	}
	

	void rotate_matrix(UINT16 src[][4], UINT16 dst[][4]) 
	{
		int i = 0;
		int j = 3;
		int count;
			
		while (i < 4 & j >= 0){
			for (count = 0; count < 4; count++)
				dst[count][j] = src[i][count];		
			i++;
			j--;
		}	
	}	
	
	void rotate(UINT16 *curr, UINT16 tetra_bitmap[][4], int x, int y, int PlacedBlocks[20][10])
	{
		int i,j;
		int true_y = y / WORDS_PER_X_AXIS / 16;
		UINT16 copy[4][4];
		
		copy_matrix(tetra_bitmap, copy);
		
		rotate_matrix(copy, tetra_bitmap);
		
			
	}
	
	
	void get_tetra_bitmap(UINT16 tetra_bitmap[][4], int type) {
		switch(type) {	
		case 1:
			copy_matrix(i_block,tetra_bitmap);
			break;
		case 2:
			copy_matrix(j_block,tetra_bitmap);
			break;
		case 3:
			copy_matrix(l_block,tetra_bitmap);
			break;
		case 4:
			copy_matrix(o_block,tetra_bitmap);
			break;
		case 5:
			copy_matrix(s_block,tetra_bitmap);
			break;
		case 6:
			copy_matrix(t_block,tetra_bitmap);
			break;
		case 7:
			copy_matrix(z_block,tetra_bitmap);
			break;
		}
	}
 
	
	void write_block(UINT16 *base) {
		int i;
		
		for (i = 0; i < 16; i++)
			*(base + 40 * i) = block_bitmap[i];
	}
	
	void clear_block(UINT16 *base) {
		int i;
		
		for (i = 0; i < 16; i++)
			*(base + 40 * i) = 0;
	}
	
	