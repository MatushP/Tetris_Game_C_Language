/*
*	TETRIS GAME
*
*	MATUSH POLAKOVIC		ZACH LY
*	mpola783@mtroyal.ca 	zly859@mtroyal.ca
*	COMP 2659
*	WINTER 2022 Major Project
*	April 8, 2022
*	main.c 
*	PAUL POSPISIL
*
*	
*	This program generates a tetris game for the user to play where the objective is 
*	to reach the highest score. 
*	
*	The game ends when the tetraminos stack too high
*
*
*		CONTROLS- 	W - Rotates the Falling Tetramino
*					A - Moves the Falling Tetramino left
*					D - Moves the Falling Tetramino right
*					S - Moves the Falling Tetramino down
*					Q - Quits the Game
*
*
*		Score- +50 points to score when a row is cleared
*			   +5 points to score each block placement
*			   +100 points to score each level up
*
*		Level- Level up occurs when 5 rows are completed and cleared
*
*		Menu- Press p to play and q to quit game
*
*
*
*/

#include <osbind.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <time.h>
#include "types.h"
#include "main.h"
#include "blocks.h"
#include "fonts.h"
#include "input.h"
#include "buffer.h"
#include "events.h"
#include "base.h"
#include "isr.h"
#include "render.h"
#include "menu.h"




struct Tetramino
{
	int x, y; /* location coordinates */
}; 


int main()
{
	/*Tetramino structure*/
	struct Tetramino tetramino;	
	struct Tetramino copy;
	
	/*PlayingField Related*/

	int fieldStartOffset = PlayFieldStart_X + (WORDS_PER_X_AXIS * PlayFieldStart_Y);
	int PlacedBlocks[PlayFieldHeight][PlayFieldWidth];
	int BufferBlocks[PlayFieldHeight][PlayFieldWidth];
	
	/*Super mode related*/
	long *timer = (long *)0x462; /* address of longword auto-incâ€™ed 70 x per s */
	long timeNow;
	long old_ssp;					/*Super() call */
	
	
	
	/*GAME VARIABLES*/
	/*Falling Tetramino Acceleration related*/
	int accel_counter = 0;
	int fall_time = 10; 
	
	/*Boolean value/loop related*/
	int collided = True;
	int game_loop = True;
	
	/*Score/Level related*/
	int score = 0;
	int rowCounter = 0;
	int lvlCounter = 1;
	int update_buff_lvl = False;
	
	
	int key;	/*Holds input key*/
	
	/*Tetramino bitmaps*/
	UINT16 tetra_bitmap[TETRA_DIMENSIONS][TETRA_DIMENSIONS];
	UINT16 tetra_copy[TETRA_DIMENSIONS][TETRA_DIMENSIONS];

	/*Buffer/Base address related*/
    UINT16 *base = get_video_base();
	UINT32 *base32 = (UINT32*) base;
	UINT16 *buffer = load_buffer(); 
	UINT32 *buffer32 = (UINT32*) buffer;
	UINT16 *current_buffer = base;
	UINT16	*temp = base;
	UINT32 *temp32 = base32;
	
	UINT16 *fieldStart = base + fieldStartOffset;			/*Base field start address*/
	UINT16 *fieldStartBuffer = buffer + fieldStartOffset;	/*Buffer field start address*/

	
	/*install_vectors();/*
	
	/*Menu Screen*/
	while(menu_screen(base, base32) == False)	/*TRUE IF PLAYER QUITS GAME*/
{		
	
	/*Black out Background*/
    loadScreen(base);
	loadScreen(buffer);
	

	/*Writes 10*20 Playing Field*/
	loadPlayField(fieldStart);
	loadPlayField(fieldStartBuffer);
	
	/*Writes LVL font*/
	write_level(base32);
	write_level(buffer32);
	
	/*Writes Tetris fonts*/
	write_tetris(base32, 288);
	write_tetris(buffer32, 288);
	
	/*Writes Score fonts*/
	writeScore(base32);
	writeScore(buffer32);
	
	/*Writes initial score numbers*/
	writeZeros(base32);
	writeZeros(buffer32);
	
	writeLvlNum(base32);
	writeLvlNum(buffer32);
	
	
	/*initialize playing field 2D arrays*/
	initializePlayingField(PlacedBlocks);
	initializePlayingField(BufferBlocks);
	 
	old_ssp = Super(0); /* enter privileged mode */
	timeNow = *timer;	
	Super(old_ssp); /* exit privileged mode as soon as possible */ 
 
	 
	while(game_loop != False)
	{
		
		if(collided == True)
		{
			/*Initializes starting point of next falling Tetramino*/
			tetramino.x = StartingX;
			tetramino.y = StartingY;
			
			/*Copy random tetramino bitmap*/
			get_tetra_bitmap(tetra_bitmap, get_random_tetra());
			
			/*Writes starting tetramino*/
			write_tetramino(fieldStart + tetramino.x + tetramino.y, tetra_bitmap);
			write_tetramino(fieldStartBuffer + tetramino.x + tetramino.y, tetra_bitmap);
			
			collided = False;
			
		}
		
		/*CREATE A COPY OF BITMAP TO HELP UPDATE BUFFER*/
		copy_matrix(tetra_bitmap, tetra_copy);
		
	
			if(check_keys())
			{	
				key = read_key();
				
				game_loop = handle_key_q(key);
			
				tetramino.x = tetramino.x + handle_X_Keys(key, tetra_bitmap, tetramino.y, tetramino.x, PlacedBlocks);
			
				tetramino.y = tetramino.y + handle_Y_Keys(key, tetra_bitmap, tetramino.y, tetramino.x, PlacedBlocks);
			
				handle_Rotate_Key(key, fieldStart, fieldStartBuffer, tetra_copy, tetra_bitmap, tetramino.y, tetramino.x, PlacedBlocks, BufferBlocks);
			}
			
			
			/*MOVE DOWN ACCORDING TO ACCELERATION*/
			if(check_lower_bounds(tetra_bitmap, tetramino.y, tetramino.x, PlacedBlocks) == False)
			{
				if(accel_counter >= fall_time)
				{
					tetramino.y = tetramino.y + (VERT_BLOCK_LENGTH);
					accel_counter = 0;
				}
				else
				{
					accel_counter++;
				}
			}
			else
			{	/*Add placed blocks to playing field array*/
				update_PlacedBlocks(BufferBlocks, tetramino.x, tetramino.y, tetra_copy);
				update_PlacedBlocks(PlacedBlocks, tetramino.x, tetramino.y, tetra_bitmap);
				collided = True;
				
				if(tetramino.y < 1)
				{
					game_loop = False;
				}
				else
				{
					score = score + 1000;	
				}				
			}
			
			old_ssp = Super(0);
			
			if(*timer != timeNow)
			{
				timeNow = *timer;
				Super(old_ssp);
				
				if(current_buffer == base)
				{
					/*WRITE TETRAMINO TO BUFFER*/
					loadPlayField(fieldStartBuffer);
					
					write_tetramino(fieldStartBuffer + tetramino.x + tetramino.y, tetra_copy);
					
					write_FieldBlocks(BufferBlocks, fieldStartBuffer);
					
					
					if(collided == True)
					{	/*Adds number of complete rows to rowCounter and score*/
						rowCounter = rowCounter + check_complete_rows(PlacedBlocks, tetramino.y, fieldStart);
						score = score + (50 * check_complete_rows(BufferBlocks, tetramino.y, fieldStartBuffer));
					}
					
					update_Score(score, buffer32);
					
					/*Check if rowCounter is enough for a level increase*/
					if(rowCounter > 4)
					{
						/*If max level is reached end game*/
						if(lvlCounter >= 10)
						{
							game_loop = False;
						}
						else
						{
							lvlCounter++;
						}
						
						update_LVL(lvlCounter, buffer32);
						rowCounter = 0;
						
						update_buff_lvl = True;	/*Update buffer lvl before page flipping*/
						
						fall_time = fall_time - 2;	/*Faster fall time*/
						
						score = score + 100;
					}
					
					else if(update_buff_lvl == True)
					{
						update_LVL(lvlCounter, buffer32);
						update_buff_lvl == False;
					}
					
					current_buffer = buffer;
				}
				
				else
				{
					/*WRITE TETRAMINO TO BASE*/
					loadPlayField(fieldStart);
					
					write_tetramino(fieldStart + tetramino.x + tetramino.y, tetra_bitmap);
					
					write_FieldBlocks(PlacedBlocks, fieldStart);
					
					if(collided == True)
					{
						/*Adds number of complete rows to rowCounter and score*/
						rowCounter = rowCounter + check_complete_rows(PlacedBlocks, tetramino.y, fieldStart);
						score = score + (50 * check_complete_rows(BufferBlocks, tetramino.y, fieldStartBuffer));
					}
					
					update_Score(score, base32);
					
					/*Check if rowCounter is enough for a level increase*/
					if(rowCounter > 4)
					{
						/*If max level is reached end game*/
						if(lvlCounter >= 10)
						{
							game_loop = False;
						}
						else
						{
							lvlCounter++;
						}
						update_LVL(lvlCounter, base32);
						rowCounter = 0;
						
						update_buff_lvl = True;		/*Update buffer lvl before page flipping*/
						
						fall_time = fall_time - 2;	/*Faster fall time*/
						
						score = score + 100;
					}
					
					else if(update_buff_lvl == True)
					{
						update_LVL(lvlCounter, base32);
						update_buff_lvl == False;
					}
					
					/*PAGE FLIP*/
					current_buffer = base;
				}
			
				set_video_base(current_buffer);
			}
			else
			{
					Super(old_ssp);
			}	
			
	}

	accel_counter = 0;
	fall_time = 10; 
	
	collided = True;
	game_loop = True;
	
	score = 0;
	rowCounter = 0;
	lvlCounter = 1;
	update_buff_lvl = False;
}
 
	/*remove_vectors();*/
	
	return 0;
}







