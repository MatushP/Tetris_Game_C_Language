/* EVENTS.C
*		
*	Matush Polakovic	mpola783@mtroyal.ca
*	Zachariah Ly		zly859@mtroyal.ca
*	COMP2659
* 	Paul Pospisil
*		
*/

#include <osbind.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <unistd.h>
#include "render.h"
#include "main.h"
#include "types.h"
#include "blocks.h"
#include "fonts.h"
#include "event.h"

	

	int check_left_bounds(UINT16 tetra_bitmap[][4], int y, int x, int PlacedBlocks[20][10])
	{
		int i = 0;
		int j;
		int bounds = False;
		int true_y = y / WORDS_PER_X_AXIS / 16;
		
		if(x <= 0)
		{
			if(x < 0)
			{
				i = 1;
			}
			if(x < -1)
			{
				i = 2;
			}
			
			for(j = 0; j < 4; j++)
			{
				if(tetra_bitmap[j][i] == 1)
				{
					bounds = True;
				}
			}	
		}
		
		for(j = 0; j < 4; j++)
		{
			for(i = 0; i < 4; i++)
				{
					if((tetra_bitmap[j][i] == 1) && (PlacedBlocks[true_y + j][x + i - 1] == 1))
					{
						bounds = True;
					}
				}
		}
		
		
		return bounds;
	}
	
	int check_right_bounds(UINT16 tetra_bitmap[][4], int y, int x, int PlacedBlocks[20][10])
	{
		int i = 3;
		int j;
		int bounds = False;
		int true_y = y / WORDS_PER_X_AXIS / 16;
		
		if(x >= 6)
		{
			if(x == 6)
			{
				i = 3;
			}			
			if(x > 6)
			{
				i = 2;
			}
			if(x > 7)
			{
				i = 1;
			}
			
				for(j = 0; j < 4; j++)
				{
					if(tetra_bitmap[j][i] == 1)
					{
						bounds = True;
					}
				}	
		}
		
		for(j = 0; j < 4; j++)
		{
			for(i = 0; i < 4; i++)
				{
					if((tetra_bitmap[j][i] == 1) && (PlacedBlocks[true_y + j][x + i + 1] == 1))
					{
						bounds = True;
					}
				}
		}
				
		
		return bounds;
	}
	
	int check_lower_bounds(UINT16 tetra_bitmap[][4], int y, int x, int PlacedBlocks[20][10])
	{
		int i;
		int j = 3;
		int bounds = False;
		int true_y = y / WORDS_PER_X_AXIS / 16;
		
		
		if(true_y >= 16)
		{
			if(true_y > 16)
			{
				j = 2;
			}
			if(true_y > 17)
			{
				j = 1;
			}
				
			for(i = 0; i < 4; i++)
			{
				if(tetra_bitmap[j][i] == 1)
				{
					bounds = True;
				}
			}
		}

		for(i = 0; i < 4; i++)
		{
			for(j = 0; j < 4; j++)
				{
					if((tetra_bitmap[j][i] == 1) && (PlacedBlocks[true_y + j + 1][x + i] == 1))
					{
						bounds = True;
					}
				}
		}
		
		
		return bounds;
	}
	
	
	void update_PlacedBlocks(int PlacedBlocks[20][10], int x, int y, UINT16 tetra_bitmap[][4])
	{
		int i,j;
		int true_y = y / WORDS_PER_X_AXIS / 16;
		
		for(j = 0; j < 4; j++)
		{
			for(i = 0; i < 4; i++)
			{
				if(tetra_bitmap[j][i] == 1)
				{
					PlacedBlocks[true_y + j][x + i] = 1;
				}
			}
		}
		
	}
	
	int check_complete_rows(int PlacedBlocks[20][10], int y, UINT16 *playfield)
	{
		int true_y = y / WORDS_PER_X_AXIS / 16;
		int i, j;
		int count = 0;
		int rowCounter = 0;
		
			
		for(j = 0; j < 4; j++)
		{
			for(i = 0; i < 10; i++)
			{
				if(PlacedBlocks[true_y + j][i] == 1)
				{
					count++;
				}
			}
			
			if(count == 10)
			{
				rowCounter++;
				update_rows(PlacedBlocks, true_y + j, playfield);
			}
			
			count = 0;
		}
		
		return rowCounter;
	}
	
	void update_rows(int PlacedBlocks[20][10], int row, UINT16 *playfield)
	{
		int i, j;
		/*Destroy this row*/
		for(i = 0; i < 10; i++)
		{
			PlacedBlocks[row][i] = 0;
			clear_block(playfield + i + (row * 16 * 40));
		}
		
		for(j = row; j > 0; j--)
		{
			for(i = 0; i < 10; i++)
			{
				if(PlacedBlocks[j - 1][i] == 1)
				{
					PlacedBlocks[j - 1][i] = 0;
					PlacedBlocks[j][i] = 1;
					
					write_block(playfield + i + (j * 16 * 40));
					clear_block(playfield + i + ((j - 1) * 16 * 40));
				}
			}
			
		}
		
	}
	
	
	
	
	int check_rotate_bounds(UINT16 tetra_bitmap[][4], int y, int x, int Blocks[20][10])
	{
		int bounds = False;
		UINT16 copy[4][4];
		
		copy_matrix(tetra_bitmap, copy);
		
		rotate_matrix(tetra_bitmap,copy);
		
		if(check_left_bounds(copy, y, x, Blocks) == True)
		{
			bounds = True;
		}
		
		if(check_right_bounds(copy, y, x, Blocks) == True)
		{
			bounds = True;
		}
		if(check_lower_bounds(copy, y, x, Blocks) == True)
		{
			bounds = True;
		}
		
		return bounds;

	}		
	
	void update_Score(int score, UINT32 *bitmap32)
{
	int temp = score;
	int digit;
	char i;
	int num = 544;

		while (temp > 0) 
		{
			digit = temp % 10;
			i = digit + '0';
			plot_font(bitmap32, num, 136, getCharBitmap(i), LONG);
			num = num - 32;
			temp /= 10;
		}
}
	
void update_LVL(int lvlCounter, UINT32 *bitmap32)
{
	int temp = lvlCounter;
	int digit;
	char i;
	int num = 160;

		while (temp > 0) 
		{
			digit = temp % 10;
			i = digit + '0';
			plot_font(bitmap32, num, 8, getCharBitmap(i), LONG);
			num = num - 32;
			temp /= 10;
		}	
	
}
	
	int handle_key_q(int key)
	{	
		int temp = True;
		
		if(key == 'q') /* Quit */
			{
				temp = False;
					
			}
		
		return temp;
	}
	
	
	int get_random_tetra()
{
	int num = (rand() % 7) + 1;
	return num;

}


	void initializePlayingField(int Blocks[20][10])
	{
		int i,j;
		
		for(j = 0; j < PlayFieldHeight; j++)
		{
			for(i = 0; i < PlayFieldWidth; i++)
			{
				Blocks[j][i] = 0;
			}
		}
	}
	
	int handle_X_Keys(int key, UINT16 tetra_bitmap[][4], int y, int x, int Blocks[20][10])
	{
		int change = 0;
		
		if(key == 'a')
		{	
					
			if(check_left_bounds(tetra_bitmap, y, x, Blocks) == False)
			{
				change--;	
			}	
		
		}
		else if(key == 'd')
		{
			if(check_right_bounds(tetra_bitmap, y, x, Blocks) == False)
			{
				change++;
			}
		}
		
		return change;
		
	}
	
	int handle_Y_Keys(int key, UINT16 tetra_bitmap[][4], int y, int x, int Blocks[20][10])
	{
		int change = 0;
		
		if(key == 's')
			{
				if(check_lower_bounds(tetra_bitmap, y, x, Blocks) == False)
				{
					change = change + (VERT_BLOCK_LENGTH);
				}
			}
		
		return change;
	}
	
	
	void handle_Rotate_Key(int key, UINT16 *fieldStart, UINT16 *fieldStartBuffer, UINT16 tetra_copy[][4], 
					UINT16 tetra_bitmap[][4], int y, int x, int PlacedBlocks[20][10], int BufferBlocks[20][10])
	{
		if(key == 'w') /* Rotate block */
			{
				if(check_rotate_bounds(tetra_bitmap, y, x, PlacedBlocks) == False)
				{
					/*ROTATES THE TETRAMINO BITMAP*/
					rotate(fieldStart, tetra_bitmap, x, y, PlacedBlocks);
					rotate(fieldStartBuffer, tetra_copy, x, y, BufferBlocks);
				}
				
			}
	}